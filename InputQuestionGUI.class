package TwasolExpert;

import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.RoundRectangle2D;
import java.io.IOException;
import javax.print.attribute.AttributeSet;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.Scrollable;
import javax.swing.SpringLayout;
import javax.swing.SwingConstants;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.DocumentFilter;

import jxl.write.Border;

public class InputQuestionGUI extends JLabel {
	
	JFrame jframe;
	Component questionTextArea;
	static SecondTextArea answerTextArea;
	Container container;
	SpringLayout sl;
	
	InputQuestionGUI(){
		
		jframe = new JFrame("TAWASOL EXPERT");
		container = jframe.getContentPane();
		sl = new SpringLayout();
		
		questionTextArea = new TextArea();
		answerTextArea = new SecondTextArea();
		
		container.setLayout(sl);
		container.add(questionTextArea, SpringLayout.SOUTH);
		container.add(answerTextArea);
		
		sl.putConstraint(SpringLayout.WEST, questionTextArea, 5, SpringLayout.WEST, container);
		sl.putConstraint(SpringLayout.NORTH, questionTextArea, 0, SpringLayout.NORTH, container);
		sl.putConstraint(SpringLayout.WEST, answerTextArea, 5, SpringLayout.WEST, container);
		sl.putConstraint(SpringLayout.NORTH, answerTextArea, 305, SpringLayout.NORTH, container);
		
		jframe.setSize(1000, 600);
		jframe.setLocationRelativeTo(null); 
		jframe.setResizable(false);
		jframe.setIconImage(new ImageIcon("C:\\Users\\mano\\eclipse-workspace\\TwasolExpert\\src\\TawasolExpertIcon.jpg").getImage());
		jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		jframe.setVisible(true);
	 }
}

class IntroducePanel extends JLabel implements KeyListener {
	
	JFrame jframe;
	JPanel jpanel;
	
	IntroducePanel(){
		
		 jframe = new JFrame();
		 
		 jframe.add(this);
		 jframe.setSize(250, 250);
		 jframe.setLocationRelativeTo(null); 
		 jframe.addKeyListener(this);
		 jframe.setUndecorated(true);
		 //jframe.setShape(new RoundRectangle2D.Double(60, 30, 300, 400, 50,100));
		 jframe.setResizable(false);
		 jframe.setVisible(true);
		 jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	 protected void paintComponent(Graphics g) {
		 
		 super.paintComponent(g);	
		 g.drawImage(new ImageIcon("C:\\Users\\mano\\eclipse-workspace\\TwasolExpert\\src\\TawasolExpertIcon.jpg").getImage(), 0, 0, null);  	 
	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		
		if(arg0.getKeyCode() == KeyEvent.VK_ENTER) {
			jframe.setVisible(false);
			jframe.dispose();
			new InputQuestionGUI();
			}
			((JFrame)arg0.getSource()).removeKeyListener( this );
	}
	
	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
	}
	
	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}

class TextArea extends JTextArea implements KeyListener, MouseListener{
	
	boolean firstTouch = true;
	boolean isProcessed = false;
	final int maxLines = 5;
	
	TextArea(){
		
		setOpaque(true);
		setVisible(true);
	    setBackground(Color.BLACK);
		setPreferredSize(new Dimension(973, 300));
		setLineWrap(true);
		setWrapStyleWord(true);
		setForeground(Color.white);
		setFont (getFont ().deriveFont (30.0f));
		setCaretColor(Color.RED);
		addKeyListener(this);
		addMouseListener(this);
		setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
		setText("اكتب السؤال هنا ...");
	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
		if(isInsideTheTextAreaFrame()) {
			
			if(isExceededTheAllowedLength()) {
				
				if(arg0.getKeyCode() == KeyEvent.VK_BACK_SPACE)
					removeLastLetterFromTheInputString();
					
				else {
					
					removeLastLetterFromTheInputString();
					showStringLengthErrorMessage();
				}
			}
			
			else if(isAllowedKey(arg0)) {
				
				if(firstTouch) {
					
					setText("");
					firstTouch = false;
				}
				
				else if(isEmptyString() || ( getText().length() == 1 && arg0.getKeyCode() == KeyEvent.VK_BACK_SPACE )) {
					
					setText("اكتب السؤال هنا ...");
					firstTouch = true;
				}
			}
			
			else if(arg0.getKeyCode() == KeyEvent.VK_CONTROL) {
				
				if(isProcessed == false) {
					
					if(firstTouch)
						showNoInputError();
					
					else {
						
						getStringForProcessing();
						enableInputMethods(false);
						isProcessed = true;
						showPressCtrlToWriteNewQuestionMessage();
					}
			
				}else {
					
					activateTheTExtAreaAgain();
					isProcessed = false;
					firstTouch = true;
				}
			}
		
		} else
			correctCursorLocation(arg0);
		
//		System.out.println(this.getText() + ", L : " + getText().length());
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub
		if(firstTouch) {
			
			setText(" ");
			firstTouch = false;
		}
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub
	
	}
	
	public void correctCursorLocation(KeyEvent arg0) {
		
		if(getCaretPosition() > maxLines) 
			setCaretPosition(getCaretPosition() - 1);
			
		System.out.println(getText());
	}
	
	public void getStringForProcessing() {
		
		Control.iQS.qs = getText();
		GUIInputStringProcessing.stringToSetOfWords();

		if(Control.iQS.isWordsArrayAbleForProcessing()) {
			
			GUIInputStringProcessing.unifying();
			GUIInputStringProcessing.postPrefixLettersRemoval();
			GUIInputStringProcessing.checkRepetationFromTheWords();
			GUIInputStringProcessing.stopWordRemoval();
			GUIInputStringProcessing.cleanEmptyWordsFromQuestionWordsArray();
			
			AnswerFinding.questionMatching();
			
			if(Control.iQS.allMatchedQuestionByAllWeights != null) {
				
//				AnswerFinding.printAllMatchedQuestionResults();
				AnswerFinding.createPossibleArrayOfMatchedQuestionByPossibleWeights();
//				
				if(Control.iQS.possibleMatchedQuestionByPossibleNumberOfMatching != null) {
					
//					AnswerFinding.printAllMatchedQuestionResultsByPossibleNumberOfGivenNumberOfMatchWordsAndAnswers();
					AnswerFinding.findBetterMatchedQuestionWeight();
					AnswerFinding.buildCandidateAnswerArray();
//					AnswerFinding.printCandidatedAnswers();
					InputQuestionGUI.answerTextArea.setText("Candidate Answer :" + Control.iQS.candidateAnswer[0]);
					writeInExcelFile();
					
				}else
					showNoPossibleMatchedQuestionsError();
				
			}else
				showNoMatchedQuestionsError();
			
		}else
			showNotImportantArrayOfWordsForProcessingError();
			
		
        int num = 0;
        
        if(Control.iQS.words != null) {
        	
        	System.out.println(Control.iQS.words.length);
            
            while(num < Control.iQS.words.length) {
            	
            	System.out.println(num + ": " + Control.iQS.words[num]);
            	num++;
            }
        }
	}
	
	public void activateTheTExtAreaAgain() {
		
		setText("اكتب السؤال هنا ...");
		Control.iQS.emptyTheArrayOfWordsOfInputQuestionAndMatchedArray();
		enableInputMethods(true);
	}

	public void removeLastLetterFromTheInputString() {
		
		int num = 0;
		char c[] = getText().toCharArray();
		char storeIn[] = new char[c.length - 1];
		
		while(num < storeIn.length) {
			
			storeIn[num] = c[num];
			num++;
		}
		
		setText(String.valueOf(storeIn));
	}
	
	public boolean checkIfEmptyString() {
		
		int num = 0;
		while(num < getText().length()) {
			
			if(getText().charAt(num) != '\n' && getText().charAt(num) != ' ')
				return false;
			
			num++;
		}
		
		return true;
	}
	
	public void writeInExcelFile() {
		
		try {
			
			ReadWriteExcelFile.writeXLSFile();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void showStringLengthErrorMessage() {
		
		JOptionPane.showMessageDialog(null, "You cann't type more than " + Control.questionAllowedSizeInGUI + " letters in a message", "Error", JOptionPane.ERROR_MESSAGE);
	}
	
	public void showWrongStringInputError() {
		
		JOptionPane.showMessageDialog(null, "The input string is not correct, input a string in Arabic with clear meaning", "Error", JOptionPane.ERROR_MESSAGE);
	}

	public void showNoInputError() {
		
		JOptionPane.showMessageDialog(null, "Your had not input any question for processing", "Error", JOptionPane.ERROR_MESSAGE);
	}
	
	public void showNotImportantArrayOfWordsForProcessingError() {
		
		JOptionPane.showMessageDialog(null, "The input has useless set of words", "Error", JOptionPane.ERROR_MESSAGE);
	}
	
	public void showNoMatchedQuestionsError() {
		
		JOptionPane.showMessageDialog(null, "No Matched questions to the given question", "Error", JOptionPane.ERROR_MESSAGE);
	}
	
	public void showNoPossibleMatchedQuestionsError() {
		
		JOptionPane.showMessageDialog(null, "No possible matched questions to the given question", "Error", JOptionPane.ERROR_MESSAGE);
	}
	
	public void showPressCtrlToWriteNewQuestionMessage() {
		
		JOptionPane.showMessageDialog(null, "Press Ctrl to write new question", "Message", JOptionPane.INFORMATION_MESSAGE);
	}
	
	public boolean isInsideTheTextAreaFrame() {
		
		if(getLineCount() <= maxLines)
			return true;
		
		return false;
	}
	
	public boolean isAllowedKey(KeyEvent arg0) {
		
		if(arg0.getKeyLocation() == 1) 
			return true;
		
		return false;
	}
	
	public boolean isExceededTheAllowedLength() {
		
		if(getText().length() >= Control.questionAllowedSizeInGUI)
			return true;

		return false;
	}
	
	public boolean isEmptyString() {
		
		if(getText().length() == 0)
			return true;
		else if(checkIfEmptyString()) 
			return true;

		return false;
	}
}

class SecondTextArea extends JTextArea {
	
	javax.swing.border.Border b;
	
	SecondTextArea(){
		
		b = BorderFactory.createRaisedBevelBorder();
		setBackground(Color.GRAY.LIGHT_GRAY);
		this.setForeground(Color.RED.darker());
		setBorder(b);
		setOpaque(true);
		this.setEditable(false);
		setPreferredSize(new Dimension(973, 250));
		setFont (getFont ().deriveFont (30.0f));
		setText("Candidate Answer :");
	}
}
